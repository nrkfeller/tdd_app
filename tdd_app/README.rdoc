BUILD FEATURE TESTS BDD

Setup rspec
add to gemfile rspec and capybara
    $ rails generate rspec:install -- adds rspec folder and files ro stack

Creating articles
Create 
    Articles id, titles, body
    Users id, name password
    Comment id, body
Branching
    git checkout -b articles
Article specs
    create feature folder in rspec folder
    create creating_article_spec.rb file within
    build scenario fir user behavior
    $ rspec spec/features/create_article_spec.rb
    fix routing in route.rb
    create controller (notice this has created rspec test)
    modify view and attemp to emulate user behavior
Front end
    add gem bootstrap and autoprefixer
    application.html.erb styling
Build all the stuff for the testing to work
Guard
    guard automatically runs rspec
    create branch
    add guard and spring to gemfile
    $ guard init rspec
    this adds a new guard file
    modify the Guardfile cmd: "rspec"
    $ guard
    has guard running, leave running in cmd line
Add more validations
    create featurs in spec
    create create logic in controller
    create validates in model
    run guard until it works
Update to guardfile
We need the guard to track changes in controllers,view,routes and models
    watch(%r{^app/controllers/(.+)_(controller)\.rb$})  { "spec/features" }
    watch(%r{^app/models/(.+)\.rb$})  { "spec/features" }
    watch(rails.view_dirs)     { "spec/features" } # { |m| rspec.spec.("features/#{m[1]}") }
    watch(rails.routes)          { "spec" } # { "#{rspec.spec_dir}/routing" }
    
WORKFLOW
1. create file in spec/features/
2. definte user behavior: before and scenario
    visit, click_link, fill_in, click_button, expect(page)
3. Modify controller, views, models, until tests pass

CONTROLLER TESTING
1. in specs
    mkdir support
    in support create file macros.rb - fill in with macros
2. in specs/controller/articles_controller_spec.rb
    require 'support/macros.rb
    describe "GET #edit"
    create contexts for accessing template via controller
    
CREATING COMMENTS
Put html code in the view/articles/show
Write logic in articles controller
generate comments model
    $ rails g model comment body:text article:references user:references
Add dependences to user, articles and comments models
Nest routes in route.rb
Generate comment controller and write create logic, related to article

ONLY USERS CAN COMMENT